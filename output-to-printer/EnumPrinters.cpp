// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// EnumPrinters.cpp
// получение списка принтеров в операционной системе Windows с помощью
// функции EnumPrinters из набора функций Windows API

#include <io.h>      // для функции _setmode
#include <fcntl.h>   // для константы _O_U16TEXT
#include <iostream>
#include <windows.h> // для функций WinAPI
using namespace std;

// прототип функции для получения списка принтеров
BOOL GetPrinters(_PRINTER_INFO_4W** printers, LPDWORD returned);

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	_setmode(_fileno(stdout), _O_U16TEXT);
	// переключение стандартного потока ввода в формат Юникода
	_setmode(_fileno(stdin), _O_U16TEXT);

	BOOL OK;                           // переменная-флаг: успех или провал вызова функции
	_PRINTER_INFO_4W* printers = NULL; // список (массив-буфер) принтеров
	DWORD np;                          // количество принтеров в списке

	OK = GetPrinters(&printers, &np);  // получить список принтеров
	if (!OK)                           // если при получении возникла ошибка,
	{                                  // сообщим о ней и завершим программу
		wcout << L"Не удается получить список принтеров в системе!\n";
		return -1;
	}

	// выведем список принтеров на экран
	wcout << L"Список принтеров в системе:\n";
	for (int i = 0; i < np; i++)
		wcout << L" " << i + 1 << L". " << printers[i].pPrinterName << endl;

	// попросим пользователя выбрать принтер
	int choice;
	wcout << L"\nВыберите номер принтера: "; wcin >> choice;
	choice--; // реальный индекс на единичку меньше
	if (choice < 0 || choice >= np) // если ошибка,
	{                               // сообщим о ней и завершим программу
		wcout << L"Ошибка, такого номера в списке нет!\n";
		return -1;
	}

	wcout << L"Вы выбрали принтер: " << printers[choice].pPrinterName << endl;

	return 0;
}

// функция возвращает через аргументы массив printers со списком принтеров в системе
// и количество элементов в этом массиве (количество принтеров) returned;
// возвращаемое значение типа bool — успех или провал вызова функции
BOOL GetPrinters(_PRINTER_INFO_4W** printers, LPDWORD returned)
{
	BOOL OK;      // переменная-флаг: успех или провал вызова функции
	DWORD needed; // требуемый размер в байтах для массива-буфера с информацией о принтерах

	// 1-й вызов: получить информацию о размере массива-буфера, который потребуется для
	// хранения информации о принтерах
	OK = EnumPrintersW(
		PRINTER_ENUM_LOCAL | PRINTER_ENUM_CONNECTIONS, // типы принтеров
		NULL,                      // без ограничений по имени сервера
		4,                         // 4-й уровень детализации информации о принтерах
		(LPBYTE)NULL,              // указатель на массив-буфер с информацией о принтерах
								   // (пока не указываем, так как в этом вызове только
								   // получаем необходимую информацию о его размере)
		0,                         // размер в байтах массива-буфера из предыдущего параметра
		&needed,                   // в эту переменную получим искомый размер
		returned);                 // фактически полученное количество принтеров

	// после первого вызова EnumPrintersW переменной OK будет присвоено значение false, а
	// переменной returned будет присвоено значение 0, так как функции EnumPrintersW
	// просто некуда было сохранить информацию о принтерах; мы получили только искомое
	// значение needed (размер памяти (в байтах), необходимый под информацию о принтерах)

	*printers = NULL; // указатель на массив-буфер с информацией о принтерах

	// выделяем память под наш массив-буфер с информацией о принтерах
	if (needed > 0)
		*printers = (_PRINTER_INFO_4W*) new BYTE[needed];

	// 2-й вызов: получаем массив-буфер с информацией о принтерах
	if (*printers != NULL)
	{
		*returned = 0;
		OK = EnumPrintersW(
			PRINTER_ENUM_LOCAL | PRINTER_ENUM_CONNECTIONS,
			NULL,
			4,
			(LPBYTE)*printers,
			needed,
			&needed,
			returned);
	}

	return OK;
}